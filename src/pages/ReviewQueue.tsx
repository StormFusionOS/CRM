import React, { useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card";
import { Button } from "../components/ui/button";
import { Textarea } from "../components/ui/textarea";

interface ReviewItem {
  id: string;
  summary: string;
  details: string;
  generatedBy: string;
}

const mockItems: ReviewItem[] = [
  {
    id: "1",
    summary: "Add FAQ schema to /services",
    details: "Suggested JSON-LD schema with 3 FAQ entries to improve SERP visibility.",
    generatedBy: "SEO AI"
  },
  {
    id: "2",
    summary: "Update hero copy on homepage",
    details: "Replace current hero paragraph with high-converting variation based on latest campaign.",
    generatedBy: "Copy Assistant"
  }
];

export const ReviewQueuePage: React.FC = () => {
  const [items, setItems] = useState(mockItems);
  const [selectedId, setSelectedId] = useState<string | null>(mockItems[0]?.id ?? null);
  const [feedback, setFeedback] = useState<string | null>(null);
  const selectedItem = useMemo(() => items.find((item) => item.id === selectedId) ?? null, [items, selectedId]);

  const handleDecision = (id: string, decision: "approved" | "rejected") => {
    setItems((prev) => prev.filter((item) => item.id !== id));
    setSelectedId((prev) => (prev === id ? null : prev));
    setFeedback(`Change ${id} ${decision}`);
  };

  return (
    <div className="grid gap-4 lg:grid-cols-[320px_1fr]">
      <Card className="h-[calc(100vh-160px)]">
        <CardHeader>
          <CardTitle>Pending Reviews</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          {items.map((item) => (
            <button
              key={item.id}
              className={`w-full rounded-lg border p-3 text-left ${item.id === selectedId ? "border-primary bg-primary/10" : ""}`}
              onClick={() => setSelectedId(item.id)}
            >
              <p className="text-sm font-semibold">{item.summary}</p>
              <p className="text-xs text-muted-foreground">Generated by {item.generatedBy}</p>
            </button>
          ))}
        </CardContent>
      </Card>
      <Card className="h-[calc(100vh-160px)]">
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Recommendation</CardTitle>
            {selectedItem && <p className="text-xs text-muted-foreground">Generated by {selectedItem.generatedBy}</p>}
            {feedback && <p className="text-xs text-primary">{feedback}</p>}
          </div>
          <div className="flex gap-2">
            {selectedItem && (
              <>
                <Button variant="secondary" onClick={() => handleDecision(selectedItem.id, "rejected")}>
                  Reject
                </Button>
                <Button onClick={() => handleDecision(selectedItem.id, "approved")}>Approve</Button>
              </>
            )}
          </div>
        </CardHeader>
        <CardContent className="space-y-3">
          {selectedItem ? (
            <>
              <Textarea className="min-h-[200px]" value={selectedItem.details} readOnly />
              <div className="rounded-lg border p-3 text-sm">
                <p className="font-semibold">Diff Preview</p>
                <p className="text-muted-foreground">
                  Use backend diff endpoint to populate before/after content. Placeholder preview shown here.
                </p>
              </div>
            </>
          ) : (
            <p className="text-sm text-muted-foreground">Select a recommendation to review details.</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
};
